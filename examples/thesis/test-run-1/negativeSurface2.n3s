@prefix : <urn:example:> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .

# Alice has a friend Bob and Bob has a friend Charly
# Alice has to choose, if she likes Bob or Charly 

:Alice :friend :Bob .
:Bob :friend :Charly .

# Alice doesn't like Charly
() log:onNegativeSurface {
    :Alice :likes :Charly.
} .

# Alice doesn't like Bob
#() log:onNegativeSurface {
#    :Alice :likes :Bob.
#} .

# Here we use two negative surfaces which expresses the rule
# ~ ( P AND ~Q AND ~R ) <=> ~P OR ~(~Q AND ~R ) <=>
# P -> ~(~Q AND ~R) <=> P -> Q OR R
# Adding more negative surfaces expresses thus an OR relation.
(_:X _:Y _:Z) log:onNegativeSurface {
    _:X :friend _:Y .
    _:Y :friend _:Z .

    () log:onNegativeSurface {
        _:X :likes _:Y .
    } .

    () log:onNegativeSurface {
        _:X :likes _:Z .
    } .
} .

# Test
() log:onNegativeSurface {
    :Alice :likes :Bob .
    () log:onNegativeSurface {
        :test :is true .
    } .
} .

() log:onNegativeSurface { :test :is true. () log:onNegativeAnswerSurface { :test :is true } } .
