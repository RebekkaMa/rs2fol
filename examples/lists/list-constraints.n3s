@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.

# every list exist
(_:X) log:onNegativeSurface {
    () log:onNegativeSurface {
        (_:BN) log:onPositiveSurface {
            _:BN rdf:first _:X.
            _:BN rdf:rest rdf:nil.
        }.
    }.
}.

(_:L _:X) log:onNegativeSurface {
    () log:onNegativeSurface {
        (_:BN1 _:BN2) log:onPositiveSurface {
            () log:onNegativeSurface {
                  _:L rdf:rest _:BN1.
                  () log:onNegativeSurface {
                  _:BN2 rdf:first _:X.
                  _:BN2 rdf:rest _:L.
                  }.
            }.
        }.
    }.
}.


# Uniqueness of lists
## list as Subject
(_:A _:B _:first _:rest _:p _:o) log:onNegativeSurface {
    () log:onNegativeSurface {
    _:B _:p _:o.
    }.
    _:A _:p _:o.

    _:A rdf:first _:first; rdf:rest _:rest.
    _:B rdf:first _:first; rdf:rest _:rest.
}.

## list as object
(_:A _:B _:first _:rest _:p _:s) log:onNegativeSurface {
    () log:onNegativeSurface {
    _:s _:p _:B.
    }.
    _:s _:p _:A.

    _:A rdf:first _:first; rdf:rest _:rest.
    _:B rdf:first _:first; rdf:rest _:rest.
}.

## lists as objects and subjects (redundant, but makes theorem proving faster)
(_:A _:B _:A1 _:B1 _:first _:rest _:p _:first1 _:rest1) log:onNegativeSurface {
	() log:negativeTriple {
		_:B1 _:p _:B.
	}.
	_:A1 _:p _:A.

	_:A rdf:first _:first; rdf:rest _:rest.
	_:B rdf:first _:first; rdf:rest _:rest.

	_:A1 rdf:first _:first1; rdf:rest _:rest1.
	_:B1 rdf:first _:first1; rdf:rest _:rest1.
}.

# rdf:first is functional - _:first as subject  
(_:A _:B _:first _:first1 _:p) log:onNegativeSurface {  
	() log:onNegativeSurface {
		_:first1 _:p _:B .  
	}.  
	_:first _:p _:B .  
	_:A rdf:first _:first; rdf:first _:first1.  
}.  

# rdf:first is functional - _:first as predicate  
(_:A _:S _:O _:first _:first1) log:onNegativeSurface {  
	() log:onNegativeSurface {
		_:S _:first1 _:O .  
	}.  
	_:S _:first _:O .  
	_:A rdf:first _:first; rdf:first _:first1.  
}.

# rdf:first is functional - _:first as object  
(_:A _:B _:first _:first1 _:p) log:onNegativeSurface {  
	() log:onNegativeSurface {
		_:B _:p _:first1.  
	}.  
	_:B _:p _:first.  
	_:A rdf:first _:first; rdf:first _:first1.  
}. 