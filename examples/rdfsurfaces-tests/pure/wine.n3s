@prefix : <urn:example:> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .

:ChateauxGreysac a :French , :Wine .
:Badenhorst a :SouthAfrican , :Wine .
:Croissant a :French, :Bread .

# ∀ x : ( x a Wine ) -> ( x contains Alcohol )
(_:X) log:onNegativeSurface {
    _:X a :Wine .

    () log:onNegativeSurface {
        _:X :contains :Alcohol .
    } .
} .

# The rule below is
#  ∀ x : ( 
#         ( ( x a Wine ) -> ( x contains Alcohol ) )  ->
#         ( ( x contains Alcohol & x a French ) -> ( x needs ImportTax ) )
#  ) 
#
# Question: how to write (what we actually need in this test)
#  ∀ x : ( 
#         ( ( x a Wine ) -> ( x contains Alcohol ) )  ->
#         ( ( x a French ) -> ( x needs ImportTax ) )
#  ) 
(_:X) log:onNegativeSurface {
    () log:onNegativeSurface {
        _:X a :Wine .

        () log:onNegativeSurface {
            _:X :contains :Alcohol .
        } .
    } . 
    () log:onNegativeSurface {
        () log:onNegativeSurface {
            _:X :contains :Alcohol . # This is the extra rule that makes the Question work (josd)
            _:X a :French .

            () log:onNegativeSurface {
                _:X :needs :ImportTax .
            } .
        } . 
    } .
} .

# Test

() log:onNegativeSurface {
    :Croissant :needs :ImportTax .
} .

() log:onNegativeSurface {
    :Badenhorst :needs :ImportTax .
} .

() log:onNegativeSurface {
    :ChateauxGreysac :needs :ImportTax .

    () log:onNegativeSurface {
        :test :is true .
    } .
} .  

() log:onNegativeSurface { :test :is true. () log:onNegativeAnswerSurface { :test :is true } } .
